#!/usr/bin/python3
import sys, os
from pathlib import Path, PurePath
import re

skipOthers = True
def processFile(infile, outfile):

  def getVal(val):
    vals = val.split('^')
    return hex(varList[vals[0]] + int(vals[1], 8))

  def replaceSbit(matchObj):
    m = getattr(matchObj, 'group')
    if m(3).find('^') > 0:
      return f"{m(1)}__sbit __at ({getVal(m(3))}) {m(2)};{m(4)}"
    else: 
      return f"{m(1)}__sbit __at ({m(3)}) {m(2)};{m(4)}"

  varList = dict()

  with open(infile, 'r', encoding='latin') as fIn, open(outfile, 'w') as fOut:
    lines = list(fIn)
    i = 0
    while(i < len(lines)):
      # remove DOS line endings if necessary
      line = re.sub(r'\r', '', lines[i])
      i += 1
      
      """
      # external register (kind of a weird format)
      #
      # in:  EXTERN xdata volatile BYTE GPIF_WAVE_DATA _AT_ 0xE400;
      # out: EXTERN xdata at 0xE400 volatile BYTE GPIF_WAVE_DATA;
      # $1: leading whitespace
      # $2: variable name
      # $3: variable location
      # $4: trailing comments, etc.
      //TODO: SDCC compiler guide page 45
      //Examples in Keil C51 folder
      if(/^(\s*)EXTERN\s*xdata\s*volatile\s*BYTE\s*(\w+(?:\s*\[\s*\d+\s*\])?)\s+_AT_\s*([^;]+);(.*)$/) {
        print "$1EXTERN xdata at $3 volatile BYTE $2;$4\n";
        next;
      }
      """

      # sfr statement
      #
      # in:  sfr IOA = 0x80;
      # out: __sfr __at (0x80) IOA;
      # $1: leading whitespace
      # $2: variable name
      # $3: variable location
      # $4: trailing comments, etc.
      test = r'^(\s*)sfr\s*(\w+)\s*=\s*([^;]+);(.*)$'
      
      if t:= re.match(test, line):
        varList[t.group(2)] = int(t.group(3), 16)
        line = re.sub(test, r"\1__sfr __at \3 \2;\4", line)
        fOut.write(line)
        continue
      
      # sbit statement
      #
      # in:  sbit SEL = 0x86+0;
      # out: sbit at (0x86+0) SEL;
      # $1: leading whitespace
      # $2: variable name
      # $3: variable location
      # $4: trailing comments, etc.
      # square bracket implies anything other than ';'
      test = r'^(\s*)sbit\s*(\w+)\s*=\s*([^;]+);(.*)$'

      if re.match(test, line):
        line = re.sub(test, replaceSbit, line)
        fOut.write(line)
        continue

      # entire line is a C++ comment, output it unchanged.
      test = '^(\s*)\/\/(.*)$'
      if re.match(test, line):
        fOut.write(line)
        continue
      
      # C comment, slurp lines until the close comment and output it unchanged.
      test= r'^(?P<ws>\s*\/\*)(?P<cmt>.*)$'	
      
      if t := re.match(test, line):
        ws = t.group('ws')
        cmt = t.group('cmt') + "\n"
        
        test = r'.*\*\/\s*$'
        
        while not re.match(test, lines[i]):
          cmt += lines[i]
          i += 1
        
        cmt += lines[i]
        i += 1


        cmt = ws + cmt
        cmt = re.sub('\r', '', cmt, flags=re.MULTILINE)
        fOut.write(cmt)
        continue

      # preprocessor statement (whitespace followed by '#'), don't change
      if re.match(r'^(\s*)\#(.*)$', line):
        # line = f'{line}\n'
        fOut.write(line)
        continue

      # blank line, don't change
      if re.match(r'^(\s*)$', line):
        # line = "\n"
        fOut.write(line)
        continue
      elif not skipOthers:
        raise Exception(f'Problem at line: {i}\n {line}')


outDir = 'out'
paths=sys.argv[1:]

if len(paths) and not os.path.exists(outDir):
    os.makedirs(outDir)

for p in paths:
  if Path(p).is_file():
    processFile(p, PurePath(outDir, p))

